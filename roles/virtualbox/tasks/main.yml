---
# ==========================================================
# CREAR VM WINDOWS EN VIRTUALBOX (PC LOCAL)
# ==========================================================
- name: Verificar que VirtualBox esté instalado
  ansible.builtin.command: VBoxManage --version
  register: vbox_version
  changed_when: false
  failed_when: vbox_version.rc != 0

- name: Verificar si la VM ya existe
  ansible.builtin.command: VBoxManage list vms
  register: vms_list
  changed_when: false

- name: Establecer si la VM existe
  ansible.builtin.set_fact:
    vm_exists: "{{ ('\"' ~ virtualbox.vm_name ~ '\"') in vms_list.stdout }}"

- name: Crear nueva VM Windows
  ansible.builtin.command: >
    VBoxManage createvm --name "{{ virtualbox.vm_name }}" 
    --ostype "{{ virtualbox.os_type }}" --register
  when: not vm_exists

- name: Configurar memoria, CPU y video
  ansible.builtin.command: >
    VBoxManage modifyvm "{{ virtualbox.vm_name }}" 
    --memory {{ virtualbox.memory }} 
    --vram {{ virtualbox.vram }} 
    --cpus {{ virtualbox.cpus }}
    --graphicscontroller vmsvga
    --accelerate3d on
  when: not vm_exists

- name: Configurar red bridged (NIC1)
  ansible.builtin.command: >
    VBoxManage modifyvm "{{ virtualbox.vm_name }}" 
    --nic1 bridged --bridgeadapter1 "{{ virtualbox.bridged_adapter }}"
  when: not vm_exists and virtualbox.bridged_adapter is defined

- name: Crear controlador SATA
  ansible.builtin.command: >
    VBoxManage storagectl "{{ virtualbox.vm_name }}" 
    --name "SATA" --add sata --controller IntelAhci
  when: not vm_exists

- name: Crear disco duro virtual
  ansible.builtin.command: >
    VBoxManage createmedium disk 
    --filename "{{ virtualbox.disk_path }}" 
    --size {{ virtualbox.disk_size_mb }}
    --format VDI
  args:
    creates: "{{ virtualbox.disk_path }}"

- name: Conectar disco duro a la VM
  ansible.builtin.command: >
    VBoxManage storageattach "{{ virtualbox.vm_name }}" 
    --storagectl "SATA" --port 0 --device 0 
    --type hdd --medium "{{ virtualbox.disk_path }}"
  when: not vm_exists

- name: Crear controlador IDE para DVD
  ansible.builtin.command: >
    VBoxManage storagectl "{{ virtualbox.vm_name }}" 
    --name "IDE" --add ide
  when: not vm_exists
  failed_when: false

- name: Conectar ISO de Windows al DVD
  ansible.builtin.command: >
    VBoxManage storageattach "{{ virtualbox.vm_name }}" 
    --storagectl "IDE" --port 0 --device 0 
    --type dvddrive --medium "{{ virtualbox.iso_path }}"
  when: not vm_exists and virtualbox.iso_path is defined

- name: Configurar orden de arranque (DVD primero)
  ansible.builtin.command: >
    VBoxManage modifyvm "{{ virtualbox.vm_name }}" 
    --boot1 dvd --boot2 disk --boot3 none --boot4 none
  when: not vm_exists

- name: Habilitar EFI (para Windows 11)
  ansible.builtin.command: >
    VBoxManage modifyvm "{{ virtualbox.vm_name }}" --firmware efi
  when: not vm_exists and virtualbox.enable_efi | default(false)

- name: Iniciar VM
  ansible.builtin.command: >
    VBoxManage startvm "{{ virtualbox.vm_name }}" --type gui
  register: vm_start
  failed_when: false

- name: Mostrar información de la VM
  ansible.builtin.debug:
    msg:
      - "VM '{{ virtualbox.vm_name }}' configurada"
      - "Memoria: {{ virtualbox.memory }}MB"
      - "CPUs: {{ virtualbox.cpus }}"
      - "Disco: {{ virtualbox.disk_size_mb }}MB"
      - "ISO: {{ virtualbox.iso_path | default('No configurada') }}"
      - "Estado: {{ 'Iniciada' if vm_start.rc == 0 else 'Error al iniciar' }}"